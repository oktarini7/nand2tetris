// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    RAM8(in=in,load=load1RAM8,address=address[0..2],out=out1RAM8);
    RAM8(in=in,load=load2RAM8,address=address[0..2],out=out2RAM8);
    RAM8(in=in,load=load3RAM8,address=address[0..2],out=out3RAM8);
    RAM8(in=in,load=load4RAM8,address=address[0..2],out=out4RAM8);
    RAM8(in=in,load=load5RAM8,address=address[0..2],out=out5RAM8);
    RAM8(in=in,load=load6RAM8,address=address[0..2],out=out6RAM8);
    RAM8(in=in,load=load7RAM8,address=address[0..2],out=out7RAM8);
    RAM8(in=in,load=load8RAM8,address=address[0..2],out=out8RAM8);
    DMux8Way(in=load,sel=address[3..5],a=load1RAM8,b=load2RAM8,c=load3RAM8,d=load4RAM8,e=load5RAM8,f=load6RAM8,g=load7RAM8,h=load8RAM8);
    Mux8Way16(a=out1RAM8,b=out2RAM8,c=out3RAM8,d=out4RAM8,e=out5RAM8,f=out6RAM8,g=out7RAM8,h=out8RAM8,sel=address[3..5],out=out);
}